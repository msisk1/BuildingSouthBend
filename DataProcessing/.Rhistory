which <- "Tracts"
# which <- "Block Groups"
individuals <- TRUE
if (individuals){
labe <- "Individuals"
}else{
labe <- "Tests"
}
if (which == "Tracts"){
id.field <- "GEO_ID"
in.shape <- "StJoe_Tracts_Blank"
out.pdf <- paste("LeadPercentMaps_Tract_",labe,".pdf",sep="")
out.shape <- "StJosephTractsLeadAggregated"
}else if (which == "Block Groups"){
id.field <- "BG_GEOID"
in.shape <- "StJoe_BlockGroups"
out.pdf <- paste("LeadPercentMaps_BlockGroups_",labe,".pdf",sep="")
out.shape <- "StJoseph_BG_LeadAggregated"
}
#
lead.data <- read.csv("UniqueID_BG_May2017.csv", stringsAsFactors = F)
lead.data$Month <- month(as.Date(substr(lead.data$SPEC_DT,1,10), format = "%m/%d/%Y"))
lead.data$year <- year(as.Date(substr(lead.data$SPEC_DT,1,10), format = "%m/%d/%Y"))
lead.data$real_spec <- as.Date(substr(lead.data$SPEC_DT,1,10), format = "%m/%d/%Y")
lead.data$age <- (as.Date(substr(lead.data$SPEC_DT,1,10), format = "%m/%d/%Y")- as.Date(substr(lead.data$DOB,1,10), format = "%m/%d/%Y")) / 365
#Tossing values we don't need
lead.data <- lead.data[which (lead.data$code != "Postal" & lead.data$code != "Locality"),]
lead.data <- lead.data[which (lead.data$age >=0 & lead.data$age < 7),]
if (individuals){
lead.ind<- lead.data %>%
group_by(UniqueID) %>%
arrange(real_spec) %>%
slice(1L)
lead.data <-data.frame(lead.ind)
}
# install.packages(("gdistance"))
rm(list=ls(all=TRUE)) # clear memory
packages<- c("rgdal","sp","lubridate","ggplot2","doBy","dplyr") # list the packages that you'll need
lapply(packages, require, character.only=T) # load the packages, if they don't load you might need to install them first
# setwd("E:/GISWork_2/Hui_China") #WIndows maching
setwd("E:/GISWork_2/Beidinger_Lead") #Linux machine
which <- "Tracts"
# which <- "Block Groups"
individuals <- TRUE
if (individuals){
labe <- "Individuals"
}else{
labe <- "Tests"
}
if (which == "Tracts"){
id.field <- "GEO_ID"
in.shape <- "StJoe_Tracts_Blank"
out.pdf <- paste("LeadPercentMaps_Tract_",labe,".pdf",sep="")
out.shape <- "StJosephTractsLeadAggregated"
}else if (which == "Block Groups"){
id.field <- "BG_GEOID"
in.shape <- "StJoe_BlockGroups"
out.pdf <- paste("LeadPercentMaps_BlockGroups_",labe,".pdf",sep="")
out.shape <- "StJoseph_BG_LeadAggregated"
}
#
# lead.data <- read.csv("HBB312017.csv", stringsAsFactors = F)                  #OLD DATA
lead.data <- read.csv("UniqueID_BG_May2017.csv", stringsAsFactors = F)
lead.data$Month <- month(as.Date(substr(lead.data$SPEC_DT,1,10), format = "%m/%d/%Y"))
lead.data$year <- year(as.Date(substr(lead.data$SPEC_DT,1,10), format = "%m/%d/%Y"))
lead.data$real_spec <- as.Date(substr(lead.data$SPEC_DT,1,10), format = "%m/%d/%Y")
lead.data$age <- (as.Date(substr(lead.data$SPEC_DT,1,10), format = "%m/%d/%Y")- as.Date(substr(lead.data$DOB,1,10), format = "%m/%d/%Y")) / 365
#Tossing values we don't need
lead.data <- lead.data[which (lead.data$code != "Postal" & lead.data$code != "Locality"),]
# lead.data <- lead.data[which (lead.data$age >=0 & lead.data$age < 7),]
#keeping only the first record (i.e. converting from tests to individuals)
if (individuals){
lead.ind<- lead.data %>%
group_by(UniqueID) %>%
arrange(real_spec) %>%
slice(1L)
lead.data <-data.frame(lead.ind)
}
rm(list=ls(all=TRUE)) # clear memory
packages<- c("rgdal","sp","lubridate","ggplot2","doBy","dplyr") # list the packages that you'll need
lapply(packages, require, character.only=T) # load the packages, if they don't load you might need to install them first
# setwd("E:/GISWork_2/Hui_China") #WIndows maching
setwd("E:/GISWork_2/Beidinger_Lead") #Linux machine
which <- "Tracts"
# which <- "Block Groups"
individuals <- F
if (individuals){
labe <- "Individuals"
}else{
labe <- "Tests"
}
if (which == "Tracts"){
id.field <- "GEO_ID"
in.shape <- "StJoe_Tracts_Blank"
out.pdf <- paste("LeadPercentMaps_Tract_",labe,".pdf",sep="")
out.shape <- "StJosephTractsLeadAggregated"
}else if (which == "Block Groups"){
id.field <- "BG_GEOID"
in.shape <- "StJoe_BlockGroups"
out.pdf <- paste("LeadPercentMaps_BlockGroups_",labe,".pdf",sep="")
out.shape <- "StJoseph_BG_LeadAggregated"
}
#
# lead.data <- read.csv("HBB312017.csv", stringsAsFactors = F)                  #OLD DATA
lead.data <- read.csv("UniqueID_BG_May2017.csv", stringsAsFactors = F)
lead.data$Month <- month(as.Date(substr(lead.data$SPEC_DT,1,10), format = "%m/%d/%Y"))
lead.data$year <- year(as.Date(substr(lead.data$SPEC_DT,1,10), format = "%m/%d/%Y"))
lead.data$real_spec <- as.Date(substr(lead.data$SPEC_DT,1,10), format = "%m/%d/%Y")
lead.data$age <- (as.Date(substr(lead.data$SPEC_DT,1,10), format = "%m/%d/%Y")- as.Date(substr(lead.data$DOB,1,10), format = "%m/%d/%Y")) / 365
#Tossing values we don't need
lead.data <- lead.data[which (lead.data$code != "Postal" & lead.data$code != "Locality"),]
# lead.data <- lead.data[which (lead.data$age >=0 & lead.data$age < 7),]
#keeping only the first record (i.e. converting from tests to individuals)
if (individuals){
lead.ind<- lead.data %>%
group_by(UniqueID) %>%
arrange(real_spec) %>%
slice(1L)
lead.data <-data.frame(lead.ind)
}
#For all
lead.agg <- aggregate(PB_RESULT ~ get(id.field), data = lead.data, FUN = mean, na.remove = F)
# install.packages(("gdistance"))
rm(list=ls(all=TRUE)) # clear memory
packages<- c("rgdal","sp","lubridate","ggplot2","doBy","dplyr") # list the packages that you'll need
lapply(packages, require, character.only=T) # load the packages, if they don't load you might need to install them first
# setwd("E:/GISWork_2/Hui_China") #WIndows maching
setwd("E:/GISWork_2/Beidinger_Lead") #Linux machine
which <- "Tracts"
# which <- "Block Groups"
individuals <- TRUE
if (individuals){
labe <- "Individuals"
}else{
labe <- "Tests"
}
if (which == "Tracts"){
id.field <- "GEO_ID"
in.shape <- "StJoe_Tracts_Blank"
out.pdf <- paste("LeadPercentMaps_Tract_",labe,".pdf",sep="")
out.shape <- "StJosephTractsLeadAggregated"
}else if (which == "Block Groups"){
id.field <- "BG_GEOID"
in.shape <- "StJoe_BlockGroups"
out.pdf <- paste("LeadPercentMaps_BlockGroups_",labe,".pdf",sep="")
out.shape <- "StJoseph_BG_LeadAggregated"
}
#
# lead.data <- read.csv("HBB312017.csv", stringsAsFactors = F)                  #OLD DATA
lead.data <- read.csv("UniqueID_BG_May2017.csv", stringsAsFactors = F)
lead.data$Month <- month(as.Date(substr(lead.data$SPEC_DT,1,10), format = "%m/%d/%Y"))
lead.data$year <- year(as.Date(substr(lead.data$SPEC_DT,1,10), format = "%m/%d/%Y"))
lead.data$real_spec <- as.Date(substr(lead.data$SPEC_DT,1,10), format = "%m/%d/%Y")
lead.data$age <- (as.Date(substr(lead.data$SPEC_DT,1,10), format = "%m/%d/%Y")- as.Date(substr(lead.data$DOB,1,10), format = "%m/%d/%Y")) / 365
#Tossing values we don't need
lead.data <- lead.data[which (lead.data$code != "Postal" & lead.data$code != "Locality"),]
lead.data <- lead.data[which (lead.data$age >=0 & lead.data$age < 7),]
if (individuals){
lead.ind<- lead.data %>%
group_by(UniqueID) %>%
arrange(real_spec) %>%
slice(1L)
lead.data <-data.frame(lead.ind)
}
table(lead.data$year)
# install.packages(("gdistance"))
rm(list=ls(all=TRUE)) # clear memory
packages<- c("rgdal","sp","lubridate","ggplot2","doBy","dplyr") # list the packages that you'll need
lapply(packages, require, character.only=T) # load the packages, if they don't load you might need to install them first
# setwd("E:/GISWork_2/Hui_China") #WIndows maching
setwd("E:/GISWork_2/Beidinger_Lead") #Linux machine
which <- "Tracts"
# which <- "Block Groups"
individuals <- TRUE
if (individuals){
labe <- "Individuals"
}else{
labe <- "Tests"
}
if (which == "Tracts"){
id.field <- "GEO_ID"
in.shape <- "StJoe_Tracts_Blank"
out.pdf <- paste("LeadPercentMaps_Tract_",labe,".pdf",sep="")
out.shape <- "StJosephTractsLeadAggregated"
}else if (which == "Block Groups"){
id.field <- "BG_GEOID"
in.shape <- "StJoe_BlockGroups"
out.pdf <- paste("LeadPercentMaps_BlockGroups_",labe,".pdf",sep="")
out.shape <- "StJoseph_BG_LeadAggregated"
}
#
# lead.data <- read.csv("HBB312017.csv", stringsAsFactors = F)                  #OLD DATA
lead.data <- read.csv("UniqueID_BG_May2017.csv", stringsAsFactors = F)
lead.data$Month <- month(as.Date(substr(lead.data$SPEC_DT,1,10), format = "%m/%d/%Y"))
lead.data$year <- year(as.Date(substr(lead.data$SPEC_DT,1,10), format = "%m/%d/%Y"))
lead.data$real_spec <- as.Date(substr(lead.data$SPEC_DT,1,10), format = "%m/%d/%Y")
lead.data$age <- (as.Date(substr(lead.data$SPEC_DT,1,10), format = "%m/%d/%Y")- as.Date(substr(lead.data$DOB,1,10), format = "%m/%d/%Y")) / 365
table(lead.data$year)
if (individuals){
lead.ind<- lead.data %>%
group_by(UniqueID) %>%
arrange(real_spec) %>%
slice(1L)
lead.data <-data.frame(lead.ind)
}
table(lead.data$year)
rm(list=ls(all=TRUE)) # clear memory
packages<- c("rgdal","sp","lubridate","ggplot2","doBy","dplyr") # list the packages that you'll need
lapply(packages, require, character.only=T) # load the packages, if they don't load you might need to install them first
#TODO:
# 1). Use Michelle's data
# 2). Stop dropping bad geocodes for mapping
# 3). Data rework so individuals, cases, and mappables are seperate files
# setwd("E:/GISWork_2/Hui_China") #WIndows maching
setwd("E:/GISWork_2/Beidinger_Lead") #Linux machine
which <- "Tracts"
# which <- "Block Groups"
individuals <- TRUE
if (individuals){
labe <- "Individuals"
}else{
labe <- "Tests"
}
if (which == "Tracts"){
id.field <- "GEO_ID"
in.shape <- "StJoe_Tracts_Blank"
out.pdf <- paste("LeadPercentMaps_Tract_",labe,".pdf",sep="")
out.shape <- "StJosephTractsLeadAggregated"
}else if (which == "Block Groups"){
id.field <- "BG_GEOID"
in.shape <- "StJoe_BlockGroups"
out.pdf <- paste("LeadPercentMaps_BlockGroups_",labe,".pdf",sep="")
out.shape <- "StJoseph_BG_LeadAggregated"
}
#
# lead.data <- read.csv("HBB312017.csv", stringsAsFactors = F)                  #OLD DATA
lead.data <- read.csv("UniqueID_BG_May2017.csv", stringsAsFactors = F)
lead.data$Month <- month(as.Date(substr(lead.data$SPEC_DT,1,10), format = "%m/%d/%Y"))
lead.data$year <- year(as.Date(substr(lead.data$SPEC_DT,1,10), format = "%m/%d/%Y"))
lead.data$real_spec <- as.Date(substr(lead.data$SPEC_DT,1,10), format = "%m/%d/%Y")
lead.data$age <- (as.Date(substr(lead.data$SPEC_DT,1,10), format = "%m/%d/%Y")- as.Date(substr(lead.data$DOB,1,10), format = "%m/%d/%Y")) / 365
table(lead.data$PREGNANT)
oop <- lead.data <- lead.data[which (lead.data$PREGNANT ==Y),]
oop <- lead.data <- lead.data[which (lead.data$PREGNANT =="Y"),]
View(oop)
# install.packages(("gdistance"))
rm(list=ls(all=TRUE)) # clear memory
packages<- c("rgdal","sp","lubridate","ggplot2","doBy","dplyr") # list the packages that you'll need
lapply(packages, require, character.only=T) # load the packages, if they don't load you might need to install them first
#TODO:
# 1). Use Michelle's data
# 2). Stop dropping bad geocodes for mapping
# 3). Data rework so individuals, cases, and mappables are seperate files
# setwd("E:/GISWork_2/Hui_China") #WIndows maching
setwd("E:/GISWork_2/Beidinger_Lead") #Linux machine
which <- "Tracts"
# which <- "Block Groups"
individuals <- TRUE
if (individuals){
labe <- "Individuals"
}else{
labe <- "Tests"
}
if (which == "Tracts"){
id.field <- "GEO_ID"
in.shape <- "StJoe_Tracts_Blank"
out.pdf <- paste("LeadPercentMaps_Tract_",labe,".pdf",sep="")
out.shape <- "StJosephTractsLeadAggregated"
}else if (which == "Block Groups"){
id.field <- "BG_GEOID"
in.shape <- "StJoe_BlockGroups"
out.pdf <- paste("LeadPercentMaps_BlockGroups_",labe,".pdf",sep="")
out.shape <- "StJoseph_BG_LeadAggregated"
}
#
# lead.data <- read.csv("HBB312017.csv", stringsAsFactors = F)                  #OLD DATA
lead.data <- read.csv("UniqueID_BG_May2017.csv", stringsAsFactors = F)
lead.data$Month <- month(as.Date(substr(lead.data$SPEC_DT,1,10), format = "%m/%d/%Y"))
lead.data$year <- year(as.Date(substr(lead.data$SPEC_DT,1,10), format = "%m/%d/%Y"))
lead.data$real_spec <- as.Date(substr(lead.data$SPEC_DT,1,10), format = "%m/%d/%Y")
lead.data$age <- (as.Date(substr(lead.data$SPEC_DT,1,10), format = "%m/%d/%Y")- as.Date(substr(lead.data$DOB,1,10), format = "%m/%d/%Y")) / 365
#Tossing values we don't need
lead.data <- lead.data[which (lead.data$code != "Postal" & lead.data$code != "Locality"),]
lead.data <- lead.data[which (lead.data$age >=0 & lead.data$age < 7),]
#keeping only the first record (i.e. converting from tests to individuals)
if (individuals){
lead.ind<- lead.data %>%
group_by(UniqueID) %>%
arrange(real_spec) %>%
slice(1L)
lead.data <-data.frame(lead.ind)
}
preg <- lead.data[which (lead.data$PREGNANT =="Y"),]
View(preg)
# install.packages(("gdistance"))
rm(list=ls(all=TRUE)) # clear memory
packages<- c("rgdal","sp","lubridate","ggplot2","doBy","dplyr") # list the packages that you'll need
lapply(packages, require, character.only=T) # load the packages, if they don't load you might need to install them first
#TODO:
# 1). Use Michelle's data
# 2). Stop dropping bad geocodes for mapping
# 3). Data rework so individuals, cases, and mappables are seperate files
# setwd("E:/GISWork_2/Hui_China") #WIndows maching
setwd("E:/GISWork_2/Beidinger_Lead") #Linux machine
which <- "Tracts"
# which <- "Block Groups"
individuals <- TRUE
if (individuals){
labe <- "Individuals"
}else{
labe <- "Tests"
}
if (which == "Tracts"){
id.field <- "GEO_ID"
in.shape <- "StJoe_Tracts_Blank"
out.pdf <- paste("LeadPercentMaps_Tract_",labe,".pdf",sep="")
out.shape <- "StJosephTractsLeadAggregated"
}else if (which == "Block Groups"){
id.field <- "BG_GEOID"
in.shape <- "StJoe_BlockGroups"
out.pdf <- paste("LeadPercentMaps_BlockGroups_",labe,".pdf",sep="")
out.shape <- "StJoseph_BG_LeadAggregated"
}
#
# lead.data <- read.csv("HBB312017.csv", stringsAsFactors = F)                  #OLD DATA
lead.data <- read.csv("UniqueID_BG_May2017.csv", stringsAsFactors = F)
lead.data$Month <- month(as.Date(substr(lead.data$SPEC_DT,1,10), format = "%m/%d/%Y"))
lead.data$year <- year(as.Date(substr(lead.data$SPEC_DT,1,10), format = "%m/%d/%Y"))
lead.data$real_spec <- as.Date(substr(lead.data$SPEC_DT,1,10), format = "%m/%d/%Y")
lead.data$age <- (as.Date(substr(lead.data$SPEC_DT,1,10), format = "%m/%d/%Y")- as.Date(substr(lead.data$DOB,1,10), format = "%m/%d/%Y")) / 365
#Tossing values we don't need
# lead.data <- lead.data[which (lead.data$code != "Postal" & lead.data$code != "Locality"),]
# lead.data <- lead.data[which (lead.data$age >=0 & lead.data$age < 7),]
#keeping only the first record (i.e. converting from tests to individuals)
if (individuals){
lead.ind<- lead.data %>%
group_by(UniqueID) %>%
arrange(real_spec) %>%
slice(1L)
lead.data <-data.frame(lead.ind)
}
preg <- lead.data[which (lead.data$PREGNANT =="Y"),]
View(preg)
# install.packages(("gdistance"))
rm(list=ls(all=TRUE)) # clear memory
packages<- c("rgdal","sp","lubridate","ggplot2","doBy","dplyr") # list the packages that you'll need
lapply(packages, require, character.only=T) # load the packages, if they don't load you might need to install them first
#TODO:
# 1). Use Michelle's data
# 2). Stop dropping bad geocodes for mapping
# 3). Data rework so individuals, cases, and mappables are seperate files
# setwd("E:/GISWork_2/Hui_China") #WIndows maching
setwd("E:/GISWork_2/Beidinger_Lead") #Linux machine
which <- "Tracts"
# which <- "Block Groups"
individuals <- TRUE
if (individuals){
labe <- "Individuals"
}else{
labe <- "Tests"
}
if (which == "Tracts"){
id.field <- "GEO_ID"
in.shape <- "StJoe_Tracts_Blank"
out.pdf <- paste("LeadPercentMaps_Tract_",labe,".pdf",sep="")
out.shape <- "StJosephTractsLeadAggregated"
}else if (which == "Block Groups"){
id.field <- "BG_GEOID"
in.shape <- "StJoe_BlockGroups"
out.pdf <- paste("LeadPercentMaps_BlockGroups_",labe,".pdf",sep="")
out.shape <- "StJoseph_BG_LeadAggregated"
}
#
# lead.data <- read.csv("HBB312017.csv", stringsAsFactors = F)                  #OLD DATA
lead.data <- read.csv("UniqueID_BG_May2017.csv", stringsAsFactors = F)
lead.data$Month <- month(as.Date(substr(lead.data$SPEC_DT,1,10), format = "%m/%d/%Y"))
lead.data$year <- year(as.Date(substr(lead.data$SPEC_DT,1,10), format = "%m/%d/%Y"))
lead.data$real_spec <- as.Date(substr(lead.data$SPEC_DT,1,10), format = "%m/%d/%Y")
lead.data$age <- (as.Date(substr(lead.data$SPEC_DT,1,10), format = "%m/%d/%Y")- as.Date(substr(lead.data$DOB,1,10), format = "%m/%d/%Y")) / 365
#Tossing values we don't need
preg <- lead.data[which (lead.data$PREGNANT =="Y"),]
View(preg)
write.csv(preg,"test.csv")
# install.packages(("gdistance"))
rm(list=ls(all=TRUE)) # clear memory
packages<- c("rgdal","sp","lubridate","ggplot2","doBy","dplyr") # list the packages that you'll need
lapply(packages, require, character.only=T) # load the packages, if they don't load you might need to install them first
#TODO:
# 1). Use Michelle's data
# 2). Stop dropping bad geocodes for mapping
# 3). Data rework so individuals, cases, and mappables are seperate files
# setwd("E:/GISWork_2/Hui_China") #WIndows maching
setwd("E:/GISWork_2/Beidinger_Lead") #Linux machine
which <- "Tracts"
# which <- "Block Groups"
individuals <- TRUE
if (individuals){
labe <- "Individuals"
}else{
labe <- "Tests"
}
if (which == "Tracts"){
id.field <- "GEO_ID"
in.shape <- "StJoe_Tracts_Blank"
out.pdf <- paste("LeadPercentMaps_Tract_",labe,".pdf",sep="")
out.shape <- "StJosephTractsLeadAggregated"
}else if (which == "Block Groups"){
id.field <- "BG_GEOID"
in.shape <- "StJoe_BlockGroups"
out.pdf <- paste("LeadPercentMaps_BlockGroups_",labe,".pdf",sep="")
out.shape <- "StJoseph_BG_LeadAggregated"
}
#
# lead.data <- read.csv("HBB312017.csv", stringsAsFactors = F)                  #OLD DATA
lead.data <- read.csv("UniqueID_BG_May2017.csv", stringsAsFactors = F)
nrow(unique(lead.data)
)
View(lead.data)
nrow(unique(lead.data[,2:50]))
View(lead.data)
nrow(unique(lead.data[,7:50]))
rm(list=ls(all=TRUE)) # clear memory
packages<- c("rgdal") # list the packages that you'll need
lapply(packages, require, character.only=T) # load the packages, if they don't load you might need to install them first
# setwd("E:/GISWork_2/Hui_China") #WIndows maching
setwd("E:/GISWork_2/HUEND/SouthBend") #Linux machine
wget("http://buildingsouthbend.nd.edu/properties.csv")
download.file("http://buildingsouthbend.nd.edu/properties.csv")
download.file("http://buildingsouthbend.nd.edu/properties.csv", destfile = "properties.csv")
properties <- read.csv("properties.csv",stringsAsFactors = F)
View(properties)
coordinates(buildings.table)=~Longitude+Latitude
buildings.table <- read.csv("properties.csv",stringsAsFactors = F)
coordinates(buildings.table)=~Longitude+Latitude
proj4string(buildings.table) <- CRS("+init=epsg:3857")
writeOGR(buildings.table, dsn="." ,layer="All_SB_Buildings_2017-07-06",driver="ESRI Shapefile")
latlong <- "+init=epsg:4326"
google <- "+init=epsg:3857"
packages<- c("rgdal") # list the packages that you'll need
lapply(packages, require, character.only=T) # load the packages, if they don't load you might need to install them first
setwd("E:/GISWork_2/HUEND/SouthBend") #Linux machine
download.file("http://buildingsouthbend.nd.edu/properties.csv", destfile = "properties.csv")
buildings.table <- read.csv("properties.csv",stringsAsFactors = F)
coordinates(buildings.table)=~Longitude+Latitude
proj4string(buildings.table) <- CRS(latlong)
writeOGR(buildings.table, dsn="." ,layer="All_SB_Buildings_2017-07-06",driver="ESRI Shapefile")
writeOGR(buildings.table, dsn="." ,layer="All_SB_Buildings_2017-07-06",driver="ESRI Shapefile",overwrite_layer = T)
writeOGR(buildings.table, dsn="." ,layer="All_SB_Buildings_20170706",driver="ESRI Shapefile",overwrite_layer = T)
#Setup
rm(list=ls(all=TRUE)) # clear memory
packages<- c("maptools","rgdal","leaflet","htmlwidgets") # list the packages that you'll need
lapply(packages, require, character.only=T) # load the packages, if they don't load you might need to install them first
setwd("N:/www/BuildingSouthBend/DataProcessing")
out.dir.name <- "WebData"
data.dir.name <- "SpatialData"
district.json.name <- file.path("../LeafletModules/WebData","Districts.js")
out.path <- file.path(getwd(),out.dir.name)
property.download <- FALSE
historic.districts <- readOGR(dsn = "SpatialData", layer = "Historic_Districts_LL")
proj4string(historic.districts) <- CRS("+init=epsg:3857")  #I have no idea why this is required.
historic.districts<- spTransform(historic.districts, CRS("+init=epsg:3857"))
label.locs <- read.csv(file.path(data.dir.name, "District_extraData.csv"))
historic.districts <- merge(historic.districts,label.locs,by="District_N")
historic.districts@data$used <- 0
historic.districts@data$used[historic.districts@data$District_N %in% active.sections] <- 1
writeOGR(historic.districts, "temp", layer="historic.districts", driver="GeoJSON")
file.copy("temp", district.json.name, overwrite = T) #for some reason I can't get writeOGR to write to a subdirectory, so this just copys it.
file.remove("temp") #and deletes the temp file
text.json <- readChar(district.json.name, file.info(district.json.name)$size)
text.json <- paste("var districts = ",text.json,";", sep="")
write(text.json,district.json.name)
head(historic.districts$used)
unique(historic.districts$used)
#Setup
rm(list=ls(all=TRUE)) # clear memory
packages<- c("maptools","rgdal","leaflet","htmlwidgets") # list the packages that you'll need
lapply(packages, require, character.only=T) # load the packages, if they don't load you might need to install them first
setwd("N:/www/BuildingSouthBend/DataProcessing")
out.dir.name <- "WebData"
data.dir.name <- "SpatialData"
district.json.name <- file.path("../LeafletModules/WebData","Districts.js")
out.path <- file.path(getwd(),out.dir.name)
property.download <- FALSE
active.sections <- c("West Washington","Downtown","Chapin Park","West North Shore", "River Bend","Riverside Drive","East Wayne Street",
"Edgewater Place","Lincolnway East","North St. Joseph Street","Taylor's Field")
if(property.download){
download.file("http://buildingsouthbend.nd.edu/properties.csv", destfile = "properties.csv")
buildings.table <- read.csv("properties.csv",stringsAsFactors = F)
coordinates(buildings.table)=~Longitude+Latitude
proj4string(buildings.table) <- CRS(latlong)
writeOGR(buildings.table, dsn="." ,layer="All_SB_Buildings_20170706",driver="ESRI Shapefile",overwrite_layer = T)
}
#Loading and subsetting historic district data
historic.districts <- readOGR(dsn = "SpatialData", layer = "Historic_Districts_LL")
proj4string(historic.districts) <- CRS("+init=epsg:3857")  #I have no idea why this is required.
historic.districts<- spTransform(historic.districts, CRS("+init=epsg:3857"))
#adding label locations to historic districts
label.locs <- read.csv(file.path(data.dir.name, "District_extraData.csv"))
# label.locs$lab_both <- paste("[",label.locs$lab_Lat,",",label.locs$lab_Lon,"]",sep = "")
historic.districts <- merge(historic.districts,label.locs,by="District_N")
historic.districts@data$used <- 0
historic.districts@data$used[historic.districts@data$District_N %in% active.sections] <- 1
writeOGR(historic.districts, "temp", layer="historic.districts", driver="GeoJSON")
file.copy("temp", district.json.name, overwrite = T) #for some reason I can't get writeOGR to write to a subdirectory, so this just copys it.
file.remove("temp") #and deletes the temp file
text.json <- readChar(district.json.name, file.info(district.json.name)$size)
text.json <- paste("var districts = ",text.json,";", sep="")
write(text.json,district.json.name)
unique(historic.districts$used)
unique(historic.districts$District_N)
unique(historic.districts$District_N[which(historic.districts$used == 1),])
unique(historic.districts$District_N[which(historic.districts$used == 1)])
